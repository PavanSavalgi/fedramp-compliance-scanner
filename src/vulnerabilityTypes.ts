import { ComplianceIssue, FedRAMPLevel } from './types';

export interface SecurityVulnerability {
    id: string;
    title: string;
    description: string;
    severity: 'critical' | 'high' | 'medium' | 'low';
    cwe?: string; // Common Weakness Enumeration
    cve?: string; // Common Vulnerabilities and Exposures
    category: VulnerabilityCategory;
    remediation: string;
    references: string[];
}

export enum VulnerabilityCategory {
    Injection = 'Injection',
    BrokenAuthentication = 'Broken Authentication',
    SensitiveDataExposure = 'Sensitive Data Exposure',
    XMLExternalEntities = 'XML External Entities (XXE)',
    BrokenAccessControl = 'Broken Access Control',
    SecurityMisconfiguration = 'Security Misconfiguration',
    CrossSiteScripting = 'Cross-Site Scripting (XSS)',
    InsecureDeserialization = 'Insecure Deserialization',
    VulnerableComponents = 'Using Components with Known Vulnerabilities',
    InsufficientLogging = 'Insufficient Logging & Monitoring',
    CryptographicFailures = 'Cryptographic Failures',
    ServerSideRequestForgery = 'Server-Side Request Forgery (SSRF)'
}

export interface VulnerabilityCheck {
    id: string;
    vulnerability: SecurityVulnerability;
    pattern?: RegExp;
    fileTypes: string[];
    checkFunction?: (content: string, fileName: string) => VulnerabilityIssue[];
}

export interface VulnerabilityIssue {
    vulnerability: SecurityVulnerability;
    file: string;
    line: number;
    column: number;
    severity: 'critical' | 'high' | 'medium' | 'low';
    message: string;
    context: string; // The actual code/config that triggered the issue
    remediation: string;
    cweId?: string;
    cveId?: string;
}

export interface SecurityScanResult {
    file: string;
    vulnerabilities: VulnerabilityIssue[];
    riskScore: number; // 0-100, higher is more risky
}

export interface CombinedScanResult {
    complianceIssues: ComplianceIssue[];
    securityVulnerabilities: VulnerabilityIssue[];
    overallRiskScore: number;
    complianceScore: number;
    securityScore: number;
}
