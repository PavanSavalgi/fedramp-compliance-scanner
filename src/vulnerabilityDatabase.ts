import { SecurityVulnerability, VulnerabilityCategory, VulnerabilityCheck } from './vulnerabilityTypes';

export const SECURITY_VULNERABILITIES: SecurityVulnerability[] = [
    // Injection Vulnerabilities
    {
        id: 'SQL_INJECTION',
        title: 'SQL Injection',
        description: 'Code is vulnerable to SQL injection attacks through unsanitized user input',
        severity: 'critical',
        cwe: 'CWE-89',
        category: VulnerabilityCategory.Injection,
        remediation: 'Use parameterized queries, prepared statements, or ORM frameworks',
        references: [
            'https://owasp.org/www-community/attacks/SQL_Injection',
            'https://cwe.mitre.org/data/definitions/89.html'
        ]
    },
    {
        id: 'COMMAND_INJECTION',
        title: 'Command Injection',
        description: 'Code allows execution of arbitrary system commands',
        severity: 'critical',
        cwe: 'CWE-78',
        category: VulnerabilityCategory.Injection,
        remediation: 'Validate and sanitize all user input, use safe APIs instead of shell commands',
        references: [
            'https://owasp.org/www-community/attacks/Command_Injection',
            'https://cwe.mitre.org/data/definitions/78.html'
        ]
    },

    // Cryptographic Failures
    {
        id: 'WEAK_ENCRYPTION',
        title: 'Weak Encryption Algorithm',
        description: 'Use of deprecated or weak encryption algorithms',
        severity: 'high',
        cwe: 'CWE-327',
        category: VulnerabilityCategory.CryptographicFailures,
        remediation: 'Use strong encryption algorithms like AES-256, avoid MD5, SHA1, DES, 3DES',
        references: [
            'https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure',
            'https://cwe.mitre.org/data/definitions/327.html'
        ]
    },
    {
        id: 'HARDCODED_SECRETS',
        title: 'Hardcoded Secrets',
        description: 'Sensitive information like passwords, API keys, or tokens hardcoded in source code',
        severity: 'critical',
        cwe: 'CWE-798',
        category: VulnerabilityCategory.SensitiveDataExposure,
        remediation: 'Use environment variables, secret management systems, or secure vaults',
        references: [
            'https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password',
            'https://cwe.mitre.org/data/definitions/798.html'
        ]
    },

    // Broken Access Control
    {
        id: 'EXCESSIVE_PERMISSIONS',
        title: 'Excessive Permissions',
        description: 'Resources configured with overly broad permissions',
        severity: 'high',
        cwe: 'CWE-269',
        category: VulnerabilityCategory.BrokenAccessControl,
        remediation: 'Apply principle of least privilege, restrict access to minimum required permissions',
        references: [
            'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control',
            'https://cwe.mitre.org/data/definitions/269.html'
        ]
    },

    // Security Misconfiguration
    {
        id: 'DEFAULT_CREDENTIALS',
        title: 'Default Credentials',
        description: 'Use of default or weak credentials',
        severity: 'critical',
        cwe: 'CWE-521',
        category: VulnerabilityCategory.SecurityMisconfiguration,
        remediation: 'Change all default credentials, enforce strong password policies',
        references: [
            'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration',
            'https://cwe.mitre.org/data/definitions/521.html'
        ]
    },
    {
        id: 'INSECURE_PROTOCOLS',
        title: 'Insecure Communication Protocols',
        description: 'Use of insecure communication protocols like HTTP, FTP, Telnet',
        severity: 'medium',
        cwe: 'CWE-319',
        category: VulnerabilityCategory.SensitiveDataExposure,
        remediation: 'Use secure protocols like HTTPS, SFTP, SSH',
        references: [
            'https://owasp.org/www-community/vulnerabilities/Insecure_Transport',
            'https://cwe.mitre.org/data/definitions/319.html'
        ]
    },

    // Vulnerable Components
    {
        id: 'VULNERABLE_DEPENDENCIES',
        title: 'Vulnerable Dependencies',
        description: 'Use of components with known security vulnerabilities',
        severity: 'high',
        cwe: 'CWE-1104',
        category: VulnerabilityCategory.VulnerableComponents,
        remediation: 'Regularly update dependencies, use dependency scanning tools',
        references: [
            'https://owasp.org/www-project-top-ten/2017/A9_2017-Using_Components_with_Known_Vulnerabilities',
            'https://cwe.mitre.org/data/definitions/1104.html'
        ]
    },

    // Insufficient Logging
    {
        id: 'INSUFFICIENT_LOGGING',
        title: 'Insufficient Logging and Monitoring',
        description: 'Lack of proper logging and monitoring capabilities',
        severity: 'medium',
        cwe: 'CWE-778',
        category: VulnerabilityCategory.InsufficientLogging,
        remediation: 'Implement comprehensive logging, monitoring, and alerting',
        references: [
            'https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring',
            'https://cwe.mitre.org/data/definitions/778.html'
        ]
    }
];

export const VULNERABILITY_CHECKS: VulnerabilityCheck[] = [
    // SQL Injection patterns
    {
        id: 'sql_injection_terraform',
        vulnerability: SECURITY_VULNERABILITIES.find(v => v.id === 'SQL_INJECTION')!,
        pattern: /(query|sql).*[\+\$].*[\'"]/i,
        fileTypes: ['.tf', '.hcl']
    },

    // Command Injection patterns
    {
        id: 'command_injection',
        vulnerability: SECURITY_VULNERABILITIES.find(v => v.id === 'COMMAND_INJECTION')!,
        pattern: /(exec|system|shell|command).*[\$\{]/i,
        fileTypes: ['.tf', '.yaml', '.yml', '.json', '.hcl']
    },

    // Weak Encryption
    {
        id: 'weak_encryption',
        vulnerability: SECURITY_VULNERABILITIES.find(v => v.id === 'WEAK_ENCRYPTION')!,
        pattern: /(md5|sha1|des|3des|rc4|ssl_?v?[12]|tls_?v?1\.?[01])/i,
        fileTypes: ['.tf', '.yaml', '.yml', '.json', '.hcl']
    },

    // Hardcoded Secrets
    {
        id: 'hardcoded_secrets',
        vulnerability: SECURITY_VULNERABILITIES.find(v => v.id === 'HARDCODED_SECRETS')!,
        pattern: /(password|secret|key|token|credential|auth).*[=:]\s*["\'][^"\']{8,}["\'](?![a-zA-Z_$])/i,
        fileTypes: ['.tf', '.yaml', '.yml', '.json', '.hcl']
    },

    // Excessive Permissions
    {
        id: 'excessive_permissions',
        vulnerability: SECURITY_VULNERABILITIES.find(v => v.id === 'EXCESSIVE_PERMISSIONS')!,
        pattern: /(0\.0\.0\.0\/0|\*|\bfull_?access\b|admin|root|sudo)/i,
        fileTypes: ['.tf', '.yaml', '.yml', '.json', '.hcl']
    },

    // Default Credentials
    {
        id: 'default_credentials',
        vulnerability: SECURITY_VULNERABILITIES.find(v => v.id === 'DEFAULT_CREDENTIALS')!,
        pattern: /(password|pwd).*[=:]\s*["\']?(admin|password|123|default|root|guest|user)["\']?/i,
        fileTypes: ['.tf', '.yaml', '.yml', '.json', '.hcl']
    },

    // Insecure Protocols
    {
        id: 'insecure_protocols',
        vulnerability: SECURITY_VULNERABILITIES.find(v => v.id === 'INSECURE_PROTOCOLS')!,
        pattern: /(http:|ftp:|telnet:|rsh:|rlogin:)/i,
        fileTypes: ['.tf', '.yaml', '.yml', '.json', '.hcl']
    }
];

export function getVulnerabilityChecksBySeverity(severity: 'critical' | 'high' | 'medium' | 'low'): VulnerabilityCheck[] {
    return VULNERABILITY_CHECKS.filter(check => check.vulnerability.severity === severity);
}

export function getVulnerabilityChecksByCategory(category: VulnerabilityCategory): VulnerabilityCheck[] {
    return VULNERABILITY_CHECKS.filter(check => check.vulnerability.category === category);
}
