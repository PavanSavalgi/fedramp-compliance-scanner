`import * as vscode from 'vscode';
import { ComplianceReport, FedRAMPLevel, ComplianceIssue } from './types';

export class ReportGenerator {
    private reportHistory: ComplianceReport[] = [];
    private lastReport: ComplianceReport | null = null;
    
    constructor() {
        this.loadReportHistory();
    }

    async generateReport(report: ComplianceReport): Promise<void> {
        // Save report to history for trend analysis
        await this.saveReportToHistory(report);
        this.setLastReport(report);
        
        const standardsText = report.standards && report.standards.length > 0 
            ? report.standards.join(', ')
            : `FedRAMP ${report.level}`;
            
        const panel = vscode.window.createWebviewPanel(
            'complianceReport',
            `${standardsText} Compliance Report v1.1`,
            vscode.ViewColumn.One,
            {
                enableScripts: true,
                retainContextWhenHidden: true
            }
        );

        panel.webview.html = this.getWebviewContent(report);

        // Handle messages from the webview
        panel.webview.onDidReceiveMessage(
            async message => {
                switch (message.command) {
                    case 'generateAIReport':
                        await this.generateAIEnhancedReport(report, panel);
                        break;
                    case 'exportReport':
                        await this.exportReport(report, message.format);
                        break;
                    case 'generateRoadmap':
                        await this.generateComplianceRoadmap(report, panel);
                        break;
                    case 'showTrendAnalysis':
                        await this.showTrendAnalysis(panel);
                        break;
                    case 'generateBenchmark':
                        await this.generateBenchmarkReport(report, panel);
                        break;
                }
            }
        );
    }

    async generateComplianceOnlyReport(report: ComplianceReport): Promise<void> {
        // Filter to only compliance issues (exclude security vulnerabilities)
        const complianceOnlyReport: ComplianceReport = {
            ...report,
            issues: report.issues.filter(issue => !issue.control.startsWith('SEC-')),
            summary: {
                ...report.summary,
                errors: report.issues.filter(issue => !issue.control.startsWith('SEC-') && issue.severity === 'error').length,
                warnings: report.issues.filter(issue => !issue.control.startsWith('SEC-') && issue.severity === 'warning').length,
                info: report.issues.filter(issue => !issue.control.startsWith('SEC-') && issue.severity === 'info').length
            }
        };

        await this.saveReportToHistory(complianceOnlyReport);
        this.setLastReport(complianceOnlyReport);
        
        const standardsText = report.standards && report.standards.length > 0 
            ? report.standards.join(', ')
            : `FedRAMP ${report.level}`;
            
        const panel = vscode.window.createWebviewPanel(
            'fedrampComplianceReport',
            `${standardsText} Compliance Report (Compliance Only)`,
            vscode.ViewColumn.One,
            {
                enableScripts: true,
                retainContextWhenHidden: true
            }
        );

        panel.webview.html = this.getComplianceWebviewContent(complianceOnlyReport);

        // Handle messages from the webview
        panel.webview.onDidReceiveMessage(
            async message => {
                switch (message.command) {
                    case 'generateAIReport':
                        await this.generateComplianceAIReport(complianceOnlyReport, panel);
                        break;
                    case 'exportReport':
                        await this.exportReport(complianceOnlyReport, message.format);
                        break;
                    case 'generateRoadmap':
                        await this.generateComplianceRoadmap(complianceOnlyReport, panel);
                        break;
                    case 'showTrendAnalysis':
                        await this.showTrendAnalysis(panel);
                        break;
                }
            }
        );
    }

    async generateSecurityOnlyReport(report: ComplianceReport): Promise<void> {
        // Filter to only security vulnerabilities
        const securityOnlyReport: ComplianceReport = {
            ...report,
            issues: report.issues.filter(issue => issue.control.startsWith('SEC-')),
            summary: {
                ...report.summary,
                errors: report.issues.filter(issue => issue.control.startsWith('SEC-') && issue.severity === 'error').length,
                warnings: report.issues.filter(issue => issue.control.startsWith('SEC-') && issue.severity === 'warning').length,
                info: report.issues.filter(issue => issue.control.startsWith('SEC-') && issue.severity === 'info').length
            }
        };

        const panel = vscode.window.createWebviewPanel(
            'fedrampSecurityReport',
            `Security Vulnerability Report`,
            vscode.ViewColumn.One,
            {
                enableScripts: true,
                retainContextWhenHidden: true
            }
        );

        panel.webview.html = this.getSecurityWebviewContent(securityOnlyReport);

        // Handle messages from the webview
        panel.webview.onDidReceiveMessage(
            async message => {
                switch (message.command) {
                    case 'generateAIReport':
                        await this.generateSecurityAIReport(securityOnlyReport, panel);
                        break;
                    case 'exportReport':
                        await this.exportReport(securityOnlyReport, message.format);
                        break;
                    case 'generateBenchmark':
                        await this.generateSecurityBenchmarkReport(securityOnlyReport, panel);
                        break;
                }
            }
        );
    }

    private async generateAIEnhancedReport(report: ComplianceReport, panel: vscode.WebviewPanel): Promise<void> {
        try {
            // Show loading state
            panel.webview.postMessage({ command: 'showLoading' });

            // Use GitHub Copilot Chat API to generate enhanced report
            const prompt = this.createCopilotPrompt(report);
            
            // For now, we'll simulate the AI response since the actual Copilot API integration
            // would require additional setup and authentication
            const aiEnhancedReport = await this.simulateAIReport(report);
            
            panel.webview.postMessage({ 
                command: 'updateAIReport', 
                content: aiEnhancedReport 
            });

        } catch (error) {
            vscode.window.showErrorMessage(`Failed to generate AI report: ${error}`);
            panel.webview.postMessage({ command: 'hideLoading' });
        }
    }

    private createCopilotPrompt(report: ComplianceReport): string {
        const standardsText = report.standards && report.standards.length > 0 
            ? report.standards.join(', ')
            : `FedRAMP ${report.level}`;
        
        return `Generate a comprehensive ${standardsText} compliance report analysis based on the following scan results:

        Scan Summary:
        - Total Files: ${report.totalFiles}
        - Scanned Files: ${report.scannedFiles}
        - Compliance Level: ${report.level}
        - Errors: ${report.summary.errors}
        - Warnings: ${report.summary.warnings}
        - Information Items: ${report.summary.info}
        - Controls Covered: ${report.summary.controlsCovered}/${report.summary.totalControls}

        Issues Found:
        ${report.issues.map(issue => `
        - ${issue.control}: ${issue.message}
          File: ${issue.file}:${issue.line}
          Severity: ${issue.severity}
          Remediation: ${issue.remediation}
        `).join('\n')}

        Please provide:
        1. Executive Summary
        2. Risk Assessment
        3. Prioritized Remediation Plan
        4. Compliance Status Overview
        5. Next Steps and Recommendations
        `;
    }

    private getRemediationPlan(report: ComplianceReport, severity: 'error' | 'warning' | 'info'): string {
        const issues = report.issues.filter(issue => issue.severity === severity);
        if (issues.length === 0) {
            return `<p>No ${severity} level issues found.</p>`;
        }

        return `
            <div class="remediation-section">
                <h4>${severity.toUpperCase()} Level Remediation Plan</h4>
                <ul>
                    ${issues.map(issue => `
                        <li>
                            <strong>${issue.control}:</strong> ${issue.message}
                            <br><small>File: ${issue.file} (Line ${issue.line})</small>
                            ${issue.remediation ? `<br><em>Remediation: ${issue.remediation}</em>` : ''}
                        </li>
                    `).join('')}
                </ul>
            </div>
        `;
    }

    private getDetailedFindings(report: ComplianceReport): string {
        const groupedIssues = new Map<string, ComplianceIssue[]>();
        
        report.issues.forEach(issue => {
            const key = issue.control;
            if (!groupedIssues.has(key)) {
                groupedIssues.set(key, []);
            }
            groupedIssues.get(key)!.push(issue);
        });

        let html = '<div class="detailed-findings">';
        html += '<h3>📋 Detailed Findings</h3>';
        
        groupedIssues.forEach((issues, control) => {
            html += `
                <div class="finding-group">
                    <h4>${control}</h4>
                    <div class="issues-list">
                        ${issues.map(issue => `
                            <div class="issue-item severity-${issue.severity}">
                                <div class="issue-header">
                                    <span class="severity-badge">${issue.severity.toUpperCase()}</span>
                                    <span class="file-info">${issue.file}:${issue.line}</span>
                                </div>
                                <div class="issue-description">${issue.message}</div>
                                ${issue.remediation ? `<div class="remediation-hint">💡 ${issue.remediation}</div>` : ''}
                            </div>
                        `).join('')}
                    </div>
                </div>
            `;
        });
        
        html += '</div>';
        return html;
    }

    private async simulateAIReport(report: ComplianceReport): Promise<string> {
        // Simulate AI processing delay
        await new Promise(resolve => setTimeout(resolve, 2000));

        const securityIssues = report.issues.filter(issue => issue.control.startsWith('SEC-'));
        const complianceIssues = report.issues.filter(issue => !issue.control.startsWith('SEC-'));

        return `
        # AI-Enhanced FedRAMP Compliance & Security Analysis

        ## Executive Summary
        
        This comprehensive security and compliance assessment analyzed ${report.scannedFiles} files out of ${report.totalFiles} total files in the repository. The scan identified:
        
        - **Compliance Issues**: ${complianceIssues.length} FedRAMP compliance violations
        - **Security Vulnerabilities**: ${securityIssues.length} security vulnerabilities
        - **Total Risk Items**: ${report.issues.length} items requiring attention
        - **Security Controls Assessed**: ${report.summary.controlsCovered}/${report.summary.totalControls}

        ## Risk Assessment

        ### Overall Risk Level: ${this.getRiskLevel(report)}
        
        **Security Risk Breakdown:**
        - Critical/High Severity: ${report.summary.errors} issues
        - Medium Severity: ${report.summary.warnings} issues  
        - Low/Info: ${report.summary.info} issues

        ${report.summary.errors > 0 ? `
        **IMMEDIATE ACTION REQUIRED**: ${report.summary.errors} critical security or compliance violations detected that could:
        - Prevent FedRAMP authorization
        - Expose sensitive data
        - Allow unauthorized access
        - Violate federal security requirements
        ` : ''}

        ${securityIssues.length > 0 ? `
        **SECURITY VULNERABILITIES DETECTED**: ${securityIssues.length} security vulnerabilities found that could be exploited by attackers.
        ` : ''}

        ## Compliance Status Overview

        - **FedRAMP Compliance Score**: ${this.calculateComplianceScore(report)}%
        - **Security Posture Score**: ${this.calculateSecurityScore(report)}%
        - **Overall Assessment**: ${this.getOverallAssessment(report)}
        - **Authorization Risk**: ${this.getAuthorizationRisk(report)}

        ## Security Vulnerability Summary

        ${this.getSecurityVulnerabilitySummary(report)}

        ## FedRAMP Compliance Summary

        ${this.getComplianceSummary(report)}

        ## Prioritized Remediation Plan

        ### Phase 1: Critical Security & Compliance Issues (0-7 days)
        ${this.getRemediationPlan(report, 'error')}

        ### Phase 2: Medium Priority Issues (8-30 days)
        ${this.getRemediationPlan(report, 'warning')}

        ### Phase 3: Improvements & Best Practices (31-90 days)
        ${this.getRemediationPlan(report, 'info')}

        ## Detailed Security Analysis

        ${this.getDetailedSecurityAnalysis(report)}

        ## Next Steps and Recommendations

        1. **Immediate Actions**: 
           - Fix all critical vulnerabilities and compliance violations
           - Implement emergency security patches where needed
           - Review and restrict excessive permissions

        2. **Short-term (30 days)**:
           - Complete vulnerability remediation
           - Update security configurations
           - Implement missing security controls

        3. **Long-term (90 days)**:
           - Establish continuous security monitoring
           - Implement DevSecOps practices
           - Regular compliance assessments
           - Security training for development teams

        4. **Ongoing**:
           - Monthly security and compliance scans
           - Quarterly risk assessments
           - Annual penetration testing
           - Continuous compliance monitoring

        ## Appendix: Detailed Findings

        ${this.getDetailedFindings(report)}

        ---
        *Comprehensive Security & Compliance Report generated by FedRAMP Compliance Scanner with AI assistance on ${new Date().toLocaleString()}*
        `;
    }

    private getRiskLevel(report: ComplianceReport): string {
        if (report.summary.errors > 5) {
            return 'HIGH';
        }
        if (report.summary.errors > 0 || report.summary.warnings > 10) {
            return 'MEDIUM';
        }
        return 'LOW';
    }

    private calculateComplianceScore(report: ComplianceReport): number {
        const totalIssues = report.summary.errors + report.summary.warnings + report.summary.info;
        const maxPossibleIssues = report.scannedFiles * 10; // Rough estimate
        const score = Math.max(0, Math.round((1 - (totalIssues / maxPossibleIssues)) * 100));
        return Math.min(100, score);
    }

    private calculateSecurityScore(report: ComplianceReport): number {
        const securityIssues = report.issues.filter(issue => issue.control.startsWith('SEC-'));
        const totalPossibleSecurityIssues = report.scannedFiles * 5; // Estimate
        const score = Math.max(0, Math.round((1 - (securityIssues.length / totalPossibleSecurityIssues)) * 100));
        return Math.min(100, score);
    }

    private getOverallAssessment(report: ComplianceReport): string {
        const complianceScore = this.calculateComplianceScore(report);
        const securityScore = this.calculateSecurityScore(report);
        const averageScore = (complianceScore + securityScore) / 2;
        
        if (averageScore >= 90) {return 'EXCELLENT';}
        if (averageScore >= 75) {return 'GOOD';}
        if (averageScore >= 60) {return 'FAIR';}
        if (averageScore >= 40) {return 'POOR';}
        return 'CRITICAL';
    }

    private getAuthorizationRisk(report: ComplianceReport): string {
        if (report.summary.errors > 10) {return 'HIGH - Authorization likely to be delayed or denied';}
        if (report.summary.errors > 5) {return 'MEDIUM - Significant issues must be addressed';}
        if (report.summary.errors > 0) {return 'LOW - Minor issues to resolve';}
        return 'MINIMAL - Good compliance posture';
    }

    private getSecurityVulnerabilitySummary(report: ComplianceReport): string {
        const securityIssues = report.issues.filter(issue => issue.control.startsWith('SEC-'));
        
        if (securityIssues.length === 0) {
            return 'No security vulnerabilities detected in the scanned files.';
        }

        const vulnerabilityTypes = new Map<string, number>();
        securityIssues.forEach(issue => {
            const category = issue.control.replace('SEC-', '');
            vulnerabilityTypes.set(category, (vulnerabilityTypes.get(category) || 0) + 1);
        });

        let summary = `**${securityIssues.length} Security Vulnerabilities Detected:**\n\n`;
        
        Array.from(vulnerabilityTypes.entries())
            .sort((a, b) => b[1] - a[1])
            .forEach(([category, count]) => {
                summary += `- **${category}**: ${count} vulnerabilities\n`;
            });

        return summary;
    }

    private getComplianceSummary(report: ComplianceReport): string {
        const complianceIssues = report.issues.filter(issue => !issue.control.startsWith('SEC-'));
        
        if (complianceIssues.length === 0) {
            return 'All scanned files appear to be compliant with FedRAMP requirements.';
        }

        const controlFamilies = new Map<string, number>();
        complianceIssues.forEach(issue => {
            const family = issue.control.split('-')[0];
            controlFamilies.set(family, (controlFamilies.get(family) || 0) + 1);
        });

        let summary = `**${complianceIssues.length} FedRAMP Compliance Issues:**\n\n`;
        
        Array.from(controlFamilies.entries())
            .sort((a, b) => b[1] - a[1])
            .forEach(([family, count]) => {
                const familyName = this.getControlFamilyName(family);
                summary += `- **${family} (${familyName})**: ${count} issues\n`;
            });

        return summary;
    }

    private getControlFamilyName(family: string): string {
        const familyNames: Record<string, string> = {
            'AC': 'Access Control',
            'AU': 'Audit and Accountability',
            'CM': 'Configuration Management',
            'CP': 'Contingency Planning',
            'IA': 'Identification and Authentication',
            'IR': 'Incident Response',
            'RA': 'Risk Assessment',
            'SC': 'System and Communications Protection',
            'SI': 'System and Information Integrity'
        };
        return familyNames[family] || 'Unknown';
    }

    private getDetailedSecurityAnalysis(report: ComplianceReport): string {
        const securityIssues = report.issues.filter(issue => issue.control.startsWith('SEC-'));
        
        if (securityIssues.length === 0) {
            return 'No detailed security analysis needed - no vulnerabilities detected.';
        }

        const criticalIssues = securityIssues.filter(issue => issue.severity === 'error');
        const highIssues = securityIssues.filter(issue => issue.severity === 'warning');
        
        let analysis = '### Critical Security Vulnerabilities\n\n';
        
        if (criticalIssues.length > 0) {
            analysis += criticalIssues.slice(0, 5).map(issue => `
**${issue.control}** in ${issue.file}:${issue.line}
- **Issue**: ${issue.message}
- **Risk**: High risk of exploitation
- **Remediation**: ${issue.remediation}
            `).join('\n');
        } else {
            analysis += 'No critical vulnerabilities detected.\n';
        }

        analysis += '\n### High Priority Security Issues\n\n';
        
        if (highIssues.length > 0) {
            analysis += highIssues.slice(0, 5).map(issue => `
**${issue.control}** in ${issue.file}:${issue.line}
- **Issue**: ${issue.message}
- **Remediation**: ${issue.remediation}
            `).join('\n');
        } else {
            analysis += 'No high priority security issues detected.\n';
        }

        return analysis;
    }

    private async exportReport(report: ComplianceReport, format: string): Promise<void> {
        const content = format === 'json' ? 
            JSON.stringify(report, null, 2) : 
            this.generateMarkdownReport(report);

        const fileName = `fedramp-compliance-report-${new Date().toISOString().split('T')[0]}.${format}`;
        
        const uri = await vscode.window.showSaveDialog({
            defaultUri: vscode.Uri.file(fileName),
            filters: format === 'json' ? 
                { 'JSON': ['json'] } : 
                { 'Markdown': ['md'] }
        });

        if (uri) {
            const fs = require('fs');
            fs.writeFileSync(uri.fsPath, content);
            vscode.window.showInformationMessage(`Report exported to ${uri.fsPath}`);
        }
    }

    private generateMarkdownReport(report: ComplianceReport): string {
        const standardsText = report.standards && report.standards.length > 0 
            ? report.standards.join(', ')
            : `FedRAMP ${report.level}`;
        
        return `# ${standardsText} Compliance Report

Generated: ${report.timestamp.toLocaleString()}

## Summary
- **Total Files**: ${report.totalFiles}
- **Scanned Files**: ${report.scannedFiles}
- **Errors**: ${report.summary.errors}
- **Warnings**: ${report.summary.warnings}
- **Information**: ${report.summary.info}

## Issues

${report.issues.map(issue => `
### ${issue.control} - ${issue.severity.toUpperCase()}
- **File**: ${issue.file}:${issue.line}
- **Message**: ${issue.message}
- **Remediation**: ${issue.remediation}
`).join('\n')}
`;
    }

    private getWebviewContent(report: ComplianceReport): string {
        return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FedRAMP Compliance Report</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
            line-height: 1.6;
            margin: 20px;
            background-color: var(--vscode-editor-background);
            color: var(--vscode-editor-foreground);
        }
        .header {
            border-bottom: 2px solid var(--vscode-panel-border);
            padding-bottom: 20px;
            margin-bottom: 30px;
        }
        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        .summary-card {
            background: var(--vscode-editor-inactiveSelectionBackground);
            padding: 15px;
            border-radius: 5px;
            border: 1px solid var(--vscode-panel-border);
        }
        .error { color: var(--vscode-errorForeground); }
        .warning { color: var(--vscode-warningForeground); }
        .info { color: var(--vscode-infoForeground); }
        .actions {
            margin: 20px 0;
            padding: 20px;
            background: var(--vscode-editor-inactiveSelectionBackground);
            border-radius: 5px;
        }
        button {
            background: var(--vscode-button-background);
            color: var(--vscode-button-foreground);
            border: none;
            padding: 8px 16px;
            margin: 5px;
            border-radius: 3px;
            cursor: pointer;
        }
        button:hover {
            background: var(--vscode-button-hoverBackground);
        }
        .loading {
            display: none;
            margin: 20px 0;
            text-align: center;
        }
        .ai-report {
            margin: 20px 0;
            padding: 20px;
            background: var(--vscode-textBlockQuote-background);
            border-left: 4px solid var(--vscode-textBlockQuote-border);
            border-radius: 5px;
        }
        .issue-item {
            margin: 10px 0;
            padding: 10px;
            background: var(--vscode-editor-inactiveSelectionBackground);
            border-radius: 3px;
            border-left: 3px solid var(--vscode-panel-border);
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>${report.standards && report.standards.length > 0 ? report.standards.join(', ') : `FedRAMP ${report.level}`} Compliance Report</h1>
        <p>Generated: ${report.timestamp.toLocaleString()}</p>
    </div>

    <div class="summary-grid">
        <div class="summary-card">
            <h3>Files Scanned</h3>
            <p><strong>${report.scannedFiles}</strong> of ${report.totalFiles}</p>
        </div>
        <div class="summary-card">
            <h3>Compliance Level</h3>
            <p><strong>${report.level}</strong></p>
        </div>
        <div class="summary-card error">
            <h3>Errors</h3>
            <p><strong>${report.summary.errors}</strong></p>
        </div>
        <div class="summary-card warning">
            <h3>Warnings</h3>
            <p><strong>${report.summary.warnings}</strong></p>
        </div>
        <div class="summary-card info">
            <h3>Information</h3>
            <p><strong>${report.summary.info}</strong></p>
        </div>
        <div class="summary-card">
            <h3>Controls Coverage</h3>
            <p><strong>${report.summary.controlsCovered}</strong>/${report.summary.totalControls}</p>
        </div>
    </div>

    <div class="actions">
        <h3>📊 Advanced Analysis</h3>
        <button onclick="generateAIReport()">🤖 AI-Enhanced Report</button>
        <button onclick="generateRoadmap()">🗺️ Compliance Roadmap</button>
        <button onclick="showTrendAnalysis()">📈 Trend Analysis</button>
        <button onclick="generateBenchmark()">📊 Benchmark Report</button>
        
        <h3>📥 Export Options</h3>
        <button onclick="exportReport('json')">📄 Export as JSON</button>
        <button onclick="exportReport('md')">📝 Export as Markdown</button>
    </div>

    <div class="loading" id="loading">
        <p>🤖 Generating AI-enhanced report... Please wait.</p>
    </div>

    <div id="ai-report-container"></div>

    <div>
        <h2>Issues Found (${report.issues.length})</h2>
        ${report.issues.map(issue => `
            <div class="issue-item ${issue.severity}">
                <h4>${issue.control} - ${issue.severity.toUpperCase()}</h4>
                <p><strong>File:</strong> ${issue.file}:${issue.line}</p>
                <p><strong>Message:</strong> ${issue.message}</p>
                <p><strong>Remediation:</strong> ${issue.remediation}</p>
            </div>
        `).join('')}
    </div>

    <script>
        const vscode = acquireVsCodeApi();

        function generateAIReport() {
            vscode.postMessage({
                command: 'generateAIReport'
            });
        }

        function generateRoadmap() {
            vscode.postMessage({
                command: 'generateRoadmap'
            });
        }

        function showTrendAnalysis() {
            vscode.postMessage({
                command: 'showTrendAnalysis'
            });
        }

        function generateBenchmark() {
            vscode.postMessage({
                command: 'generateBenchmark'
            });
        }

        function exportReport(format) {
            vscode.postMessage({
                command: 'exportReport',
                format: format
            });
        }

        window.addEventListener('message', event => {
            const message = event.data;
            switch (message.command) {
                case 'showLoading':
                    document.getElementById('loading').style.display = 'block';
                    break;
                case 'hideLoading':
                    document.getElementById('loading').style.display = 'none';
                    break;
                case 'updateAIReport':
                    document.getElementById('loading').style.display = 'none';
                    const container = document.getElementById('ai-report-container');
                    container.innerHTML = '<div class="ai-report"><h2>🤖 AI-Enhanced Analysis</h2><pre>' + 
                        message.content + '</pre></div>';
                    break;
                case 'updateRoadmap':
                    document.getElementById('loading').style.display = 'none';
                    const roadmapContainer = document.getElementById('ai-report-container');
                    roadmapContainer.innerHTML = '<div class="ai-report"><h2>🗺️ Compliance Roadmap</h2><pre>' + 
                        message.content + '</pre></div>';
                    break;
                case 'updateTrendAnalysis':
                    document.getElementById('loading').style.display = 'none';
                    const trendContainer = document.getElementById('ai-report-container');
                    trendContainer.innerHTML = '<div class="ai-report"><h2>📈 Trend Analysis</h2><pre>' + 
                        message.content + '</pre></div>';
                    break;
                case 'updateBenchmark':
                    document.getElementById('loading').style.display = 'none';
                    const benchmarkContainer = document.getElementById('ai-report-container');
                    benchmarkContainer.innerHTML = '<div class="ai-report"><h2>📊 Benchmark Report</h2><pre>' + 
                        message.content + '</pre></div>';
                    break;
            }
        });
    </script>
</body>
</html>`;
    }

    private getComplianceWebviewContent(report: ComplianceReport): string {
        return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FedRAMP Compliance Report</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
            line-height: 1.6;
            margin: 20px;
            background-color: var(--vscode-editor-background);
            color: var(--vscode-editor-foreground);
        }
        .header {
            border-bottom: 2px solid var(--vscode-panel-border);
            padding-bottom: 20px;
            margin-bottom: 30px;
        }
        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        .summary-card {
            background: var(--vscode-editor-inactiveSelectionBackground);
            padding: 15px;
            border-radius: 5px;
            border: 1px solid var(--vscode-panel-border);
        }
        .error { color: var(--vscode-errorForeground); }
        .warning { color: var(--vscode-warningForeground); }
        .info { color: var(--vscode-infoForeground); }
        .actions {
            margin: 20px 0;
            padding: 20px;
            background: var(--vscode-editor-inactiveSelectionBackground);
            border-radius: 5px;
        }
        button {
            background: var(--vscode-button-background);
            color: var(--vscode-button-foreground);
            border: none;
            padding: 8px 16px;
            margin: 5px;
            border-radius: 3px;
            cursor: pointer;
        }
        button:hover {
            background: var(--vscode-button-hoverBackground);
        }
        .loading {
            display: none;
            margin: 20px 0;
            text-align: center;
        }
        .ai-report {
            margin: 20px 0;
            padding: 20px;
            background: var(--vscode-textBlockQuote-background);
            border-left: 4px solid var(--vscode-textBlockQuote-border);
            border-radius: 5px;
        }
        .issue-item {
            margin: 10px 0;
            padding: 10px;
            background: var(--vscode-editor-inactiveSelectionBackground);
            border-radius: 3px;
            border-left: 3px solid var(--vscode-panel-border);
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>🏛️ ${report.standards && report.standards.length > 0 ? report.standards.join(', ') : `FedRAMP ${report.level}`} Compliance Report</h1>
        <p>Generated: ${report.timestamp.toLocaleString()}</p>
    </div>

    <div class="summary-grid">
        <div class="summary-card">
            <h3>Files Scanned</h3>
            <p><strong>${report.scannedFiles}</strong> of ${report.totalFiles}</p>
        </div>
        <div class="summary-card">
            <h3>Compliance Level</h3>
            <p><strong>${report.level}</strong></p>
        </div>
        <div class="summary-card error">
            <h3>Critical Issues</h3>
            <p><strong>${report.summary.errors}</strong></p>
        </div>
        <div class="summary-card warning">
            <h3>Warnings</h3>
            <p><strong>${report.summary.warnings}</strong></p>
        </div>
        <div class="summary-card info">
            <h3>Information</h3>
            <p><strong>${report.summary.info}</strong></p>
        </div>
        <div class="summary-card">
            <h3>Controls Coverage</h3>
            <p><strong>${report.summary.controlsCovered}</strong>/${report.summary.totalControls}</p>
        </div>
    </div>

    <div class="actions">
        <h3>🏛️ Compliance Analysis</h3>
        <button onclick="generateAIReport()">🤖 AI Compliance Analysis</button>
        <button onclick="generateRoadmap()">🗺️ Compliance Roadmap</button>
        <button onclick="showTrendAnalysis()">📈 Trend Analysis</button>
        
        <h3>📥 Export Options</h3>
        <button onclick="exportReport('json')">📄 Export as JSON</button>
        <button onclick="exportReport('md')">📝 Export as Markdown</button>
    </div>

    <div class="loading" id="loading">
        <p>🤖 Generating compliance analysis... Please wait.</p>
    </div>

    <div id="ai-report-container"></div>

    <div>
        <h2>Compliance Issues Found (${report.issues.length})</h2>
        ${report.issues.map(issue => `
            <div class="issue-item ${issue.severity}">
                <h4>${issue.control} - ${issue.severity.toUpperCase()}</h4>
                <p><strong>File:</strong> ${issue.file}:${issue.line}</p>
                <p><strong>Message:</strong> ${issue.message}</p>
                <p><strong>Remediation:</strong> ${issue.remediation}</p>
            </div>
        `).join('')}
    </div>

    <script>
        const vscode = acquireVsCodeApi();

        function generateAIReport() {
            vscode.postMessage({
                command: 'generateAIReport'
            });
        }

        function generateRoadmap() {
            vscode.postMessage({
                command: 'generateRoadmap'
            });
        }

        function showTrendAnalysis() {
            vscode.postMessage({
                command: 'showTrendAnalysis'
            });
        }

        function exportReport(format) {
            vscode.postMessage({
                command: 'exportReport',
                format: format
            });
        }

        window.addEventListener('message', event => {
            const message = event.data;
            switch (message.command) {
                case 'showLoading':
                    document.getElementById('loading').style.display = 'block';
                    break;
                case 'hideLoading':
                    document.getElementById('loading').style.display = 'none';
                    break;
                case 'updateAIReport':
                    document.getElementById('loading').style.display = 'none';
                    const container = document.getElementById('ai-report-container');
                    container.innerHTML = '<div class="ai-report"><h2>🤖 AI Compliance Analysis</h2><pre>' + 
                        message.content + '</pre></div>';
                    break;
                case 'updateRoadmap':
                    document.getElementById('loading').style.display = 'none';
                    const roadmapContainer = document.getElementById('ai-report-container');
                    roadmapContainer.innerHTML = '<div class="ai-report"><h2>🗺️ Compliance Roadmap</h2><pre>' + 
                        message.content + '</pre></div>';
                    break;
                case 'updateTrendAnalysis':
                    document.getElementById('loading').style.display = 'none';
                    const trendContainer = document.getElementById('ai-report-container');
                    trendContainer.innerHTML = '<div class="ai-report"><h2>📈 Trend Analysis</h2><pre>' + 
                        message.content + '</pre></div>';
                    break;
            }
        });
    </script>
</body>
</html>`;
    }

    private getSecurityWebviewContent(report: ComplianceReport): string {
        return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Security Vulnerability Report</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
            line-height: 1.6;
            margin: 20px;
            background-color: var(--vscode-editor-background);
            color: var(--vscode-editor-foreground);
        }
        .header {
            border-bottom: 2px solid var(--vscode-panel-border);
            padding-bottom: 20px;
            margin-bottom: 30px;
        }
        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        .summary-card {
            background: var(--vscode-editor-inactiveSelectionBackground);
            padding: 15px;
            border-radius: 5px;
            border: 1px solid var(--vscode-panel-border);
        }
        .error { color: var(--vscode-errorForeground); }
        .warning { color: var(--vscode-warningForeground); }
        .info { color: var(--vscode-infoForeground); }
        .actions {
            margin: 20px 0;
            padding: 20px;
            background: var(--vscode-editor-inactiveSelectionBackground);
            border-radius: 5px;
        }
        button {
            background: var(--vscode-button-background);
            color: var(--vscode-button-foreground);
            border: none;
            padding: 8px 16px;
            margin: 5px;
            border-radius: 3px;
            cursor: pointer;
        }
        button:hover {
            background: var(--vscode-button-hoverBackground);
        }
        .loading {
            display: none;
            margin: 20px 0;
            text-align: center;
        }
        .ai-report {
            margin: 20px 0;
            padding: 20px;
            background: var(--vscode-textBlockQuote-background);
            border-left: 4px solid var(--vscode-textBlockQuote-border);
            border-radius: 5px;
        }
        .issue-item {
            margin: 10px 0;
            padding: 10px;
            background: var(--vscode-editor-inactiveSelectionBackground);
            border-radius: 3px;
            border-left: 3px solid var(--vscode-panel-border);
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>🛡️ Security Vulnerability Report</h1>
        <p>Generated: ${report.timestamp.toLocaleString()}</p>
    </div>

    <div class="summary-grid">
        <div class="summary-card">
            <h3>Files Scanned</h3>
            <p><strong>${report.scannedFiles}</strong> of ${report.totalFiles}</p>
        </div>
        <div class="summary-card">
            <h3>Security Score</h3>
            <p><strong>${this.calculateSecurityScore(report)}%</strong></p>
        </div>
        <div class="summary-card error">
            <h3>Critical Vulnerabilities</h3>
            <p><strong>${report.summary.errors}</strong></p>
        </div>
        <div class="summary-card warning">
            <h3>High Priority</h3>
            <p><strong>${report.summary.warnings}</strong></p>
        </div>
        <div class="summary-card info">
            <h3>Medium/Low</h3>
            <p><strong>${report.summary.info}</strong></p>
        </div>
        <div class="summary-card">
            <h3>Total Vulnerabilities</h3>
            <p><strong>${report.issues.length}</strong></p>
        </div>
    </div>

    <div class="actions">
        <h3>🛡️ Security Analysis</h3>
        <button onclick="generateAIReport()">🤖 AI Security Analysis</button>
        <button onclick="generateBenchmark()">📊 Security Benchmark</button>
        
        <h3>📥 Export Options</h3>
        <button onclick="exportReport('json')">📄 Export as JSON</button>
        <button onclick="exportReport('md')">📝 Export as Markdown</button>
    </div>

    <div class="loading" id="loading">
        <p>🤖 Generating security analysis... Please wait.</p>
    </div>

    <div id="ai-report-container"></div>

    <div>
        <h2>Security Vulnerabilities Found (${report.issues.length})</h2>
        ${report.issues.map(issue => `
            <div class="issue-item ${issue.severity}">
                <h4>${issue.control} - ${issue.severity.toUpperCase()}</h4>
                <p><strong>File:</strong> ${issue.file}:${issue.line}</p>
                <p><strong>Message:</strong> ${issue.message}</p>
                <p><strong>Remediation:</strong> ${issue.remediation}</p>
            </div>
        `).join('')}
    </div>

    <script>
        const vscode = acquireVsCodeApi();

        function generateAIReport() {
            vscode.postMessage({
                command: 'generateAIReport'
            });
        }

        function generateBenchmark() {
            vscode.postMessage({
                command: 'generateBenchmark'
            });
        }

        function exportReport(format) {
            vscode.postMessage({
                command: 'exportReport',
                format: format
            });
        }

        window.addEventListener('message', event => {
            const message = event.data;
            switch (message.command) {
                case 'showLoading':
                    document.getElementById('loading').style.display = 'block';
                    break;
                case 'hideLoading':
                    document.getElementById('loading').style.display = 'none';
                    break;
                case 'updateAIReport':
                    document.getElementById('loading').style.display = 'none';
                    const container = document.getElementById('ai-report-container');
                    container.innerHTML = '<div class="ai-report"><h2>🤖 AI Security Analysis</h2><pre>' + 
                        message.content + '</pre></div>';
                    break;
                case 'updateBenchmark':
                    document.getElementById('loading').style.display = 'none';
                    const benchmarkContainer = document.getElementById('ai-report-container');
                    benchmarkContainer.innerHTML = '<div class="ai-report"><h2>📊 Security Benchmark</h2><pre>' + 
                        message.content + '</pre></div>';
                    break;
            }
        });
    </script>
</body>
</html>`;
    }

    private async saveReportToHistory(report: ComplianceReport): Promise<void> {
        this.reportHistory.push(report);
        this.reportHistory = this.reportHistory.slice(-10); // Keep only last 10
        
        try {
            const config = vscode.workspace.getConfiguration('fedramp-compliance-scanner');
            await config.update('reportHistory', this.reportHistory, vscode.ConfigurationTarget.Workspace);
        } catch (error) {
            console.log('Failed to save report history:', error);
        }
    }

    private async loadReportHistory(): Promise<void> {
        // Load previous reports for trend analysis
        try {
            const config = vscode.workspace.getConfiguration('fedramp-compliance-scanner');
            const history = config.get<ComplianceReport[]>('reportHistory', []);
            this.reportHistory = history.slice(-10); // Keep last 10 reports
        } catch (error) {
            console.log('No previous report history found');
            this.reportHistory = [];
        }
    }

    private async generateComplianceRoadmap(report: ComplianceReport, panel: vscode.WebviewPanel): Promise<void> {
        try {
            panel.webview.postMessage({ command: 'showLoading' });

            const roadmap = this.generateComplianceRoadmap(report, panel);
            
            panel.webview.postMessage({ 
                command: 'updateRoadmap', 
                content: roadmap 
            });

        } catch (error) {
            vscode.window.showErrorMessage(`Failed to generate roadmap: ${error}`);
            panel.webview.postMessage({ command: 'hideLoading' });
        }
    }

    private createTrendAnalysis(): string {
        const history = vscode.workspace.getConfiguration('fedrampCompliance').get<any[]>('reportHistory', []);
        
        if (history.length < 2) {
            return `
                <div class="trend-chart">
                    <h3>📊 Compliance Trends</h3>
                    <p>Not enough historical data for trend analysis. Run more scans to see trends.</p>
                </div>
            `;
        }

        const latest = history[history.length - 1];
        const previous = history[history.length - 2];
        
        const complianceChange = latest.complianceScore - previous.complianceScore;
        const securityChange = latest.securityScore - previous.securityScore;
        
        return `
            <div class="trend-chart">
                <h3>📊 Compliance Trends</h3>
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
                    <div>
                        <h4>Compliance Score Trend</h4>
                        <p>Current: ${latest.complianceScore}%</p>
                        <p>Previous: ${previous.complianceScore}%</p>
                        <p style="color: ${complianceChange >= 0 ? '#4CAF50' : '#FF5722'}">
                            Change: ${complianceChange >= 0 ? '+' : ''}${complianceChange.toFixed(1)}%
                        </p>
                    </div>
                    <div>
                        <h4>Security Score Trend</h4>
                        <p>Current: ${latest.securityScore}%</p>
                        <p>Previous: ${previous.securityScore}%</p>
                        <p style="color: ${securityChange >= 0 ? '#4CAF50' : '#FF5722'}">
                            Change: ${securityChange >= 0 ? '+' : ''}${securityChange.toFixed(1)}%
                        </p>
                    </div>
                </div>
            </div>
        `;
    }

    private async showTrendAnalysis(panel: vscode.WebviewPanel): Promise<void> {
        try {
            panel.webview.postMessage({ command: 'showLoading' });

            const trendAnalysis = this.createTrendAnalysis();
            
            panel.webview.postMessage({ 
                command: 'updateTrendAnalysis', 
                content: trendAnalysis 
            });

        } catch (error) {
            vscode.window.showErrorMessage(`Failed to generate trend analysis: ${error}`);
            panel.webview.postMessage({ command: 'hideLoading' });
        }
    }

    private async generateBenchmarkReport(report: ComplianceReport, panel: vscode.WebviewPanel): Promise<void> {
        try {
            panel.webview.postMessage({ command: 'showLoading' });

            const benchmark = this.generateBenchmarkReport(report, panel);
            
            panel.webview.postMessage({ 
                command: 'updateBenchmark', 
                content: benchmark 
            });

        } catch (error) {
            vscode.window.showErrorMessage(`Failed to generate benchmark: ${error}`);
            panel.webview.postMessage({ command: 'hideLoading' });
        }
    }

    private async generateComplianceAIReport(report: ComplianceReport, panel: vscode.WebviewPanel): Promise<void> {
        try {
            panel.webview.postMessage({ command: 'showLoading' });

            const aiReport = await this.simulateAIReport(report);
            
            panel.webview.postMessage({ 
                command: 'updateAIReport', 
                content: aiReport 
            });

        } catch (error) {
            vscode.window.showErrorMessage(`Failed to generate compliance AI report: ${error}`);
            panel.webview.postMessage({ command: 'hideLoading' });
        }
    }

    private async generateSecurityAIReport(report: ComplianceReport, panel: vscode.WebviewPanel): Promise<void> {
        try {
            panel.webview.postMessage({ command: 'showLoading' });

            const aiReport = await this.simulateAIReport(report);
            
            panel.webview.postMessage({ 
                command: 'updateAIReport', 
                content: aiReport 
            });

        } catch (error) {
            vscode.window.showErrorMessage(`Failed to generate security AI report: ${error}`);
            panel.webview.postMessage({ command: 'hideLoading' });
        }
    }

    private async generateSecurityBenchmarkReport(report: ComplianceReport, panel: vscode.WebviewPanel): Promise<void> {
        try {
            panel.webview.postMessage({ command: 'showLoading' });

            const benchmark = this.generateSecurityBenchmarkReport(report, panel);
            
            panel.webview.postMessage({ 
                command: 'updateBenchmark', 
                content: benchmark 
            });

        } catch (error) {
            vscode.window.showErrorMessage(`Failed to generate security benchmark: ${error}`);
            panel.webview.postMessage({ command: 'hideLoading' });
        }
    }

    async generateIndividualReports(report: ComplianceReport): Promise<void> {
        const config = vscode.workspace.getConfiguration('fedrampCompliance');
        const selectedStandards = config.get<string[]>('complianceStandards', ['FedRAMP']);
        
        // Generate a report for each selected standard
        for (const standard of selectedStandards) {
            await this.generateStandardSpecificReport(report, standard);
        }
        
        vscode.window.showInformationMessage(`Generated individual reports for ${selectedStandards.length} compliance standards`);
    }

    async generateStandardSpecificReport(originalReport: ComplianceReport, standard: string): Promise<void> {
        // Filter issues for the specific standard
        const standardIssues = originalReport.issues.filter(issue => 
            issue.control.startsWith(this.getStandardPrefix(standard)) || 
            issue.control.includes(standard)
        );

        // Create a standard-specific report
        const standardReport: ComplianceReport = {
            ...originalReport,
            standards: [standard as any],
            issues: standardIssues,
            summary: {
                ...originalReport.summary,
                errors: standardIssues.filter(i => i.severity === 'error').length,
                warnings: standardIssues.filter(i => i.severity === 'warning').length,
                info: standardIssues.filter(i => i.severity === 'info').length,
                controlsCovered: new Set(standardIssues.map(i => i.control)).size
            }
        };

        const panel = vscode.window.createWebviewPanel(
            `${standard.toLowerCase()}Report`,
            `${standard} Compliance Report`,
            vscode.ViewColumn.One,
            {
                enableScripts: true,
                retainContextWhenHidden: true
            }
        );

        panel.webview.html = this.getStandardSpecificWebviewContent(standardReport, standard);

        // Handle messages from the webview
        panel.webview.onDidReceiveMessage(
            async message => {
                switch (message.command) {
                    case 'generateAIReport':
                        await this.generateAIEnhancedReport(standardReport, panel);
                        break;
                    case 'exportReport':
                        await this.exportStandardReport(standardReport, standard, message.format);
                        break;
                }
            }
        );
    }

    private getStandardPrefix(standard: string): string {
        const prefixes: { [key: string]: string } = {
            'FedRAMP': 'AC-|AU-|CM-|IA-|SC-|SI-',
            'GDPR': 'GDPR-',
            'HIPAA': 'HIPAA-',
            'DPDP': 'DPDP-',
            'PCI-DSS': 'PCI-',
            'ISO-27001': 'ISO-A-',
            'ISO-27002': 'ISO27002-',
            'SOC-2': 'SOC2-',
            'NIST-CSF': 'NIST-'
        };
        return prefixes[standard] || standard;
    }

    private getStandardSpecificWebviewContent(report: ComplianceReport, standard: string): string {
        const standardName = this.getStandardDisplayName(standard);
        const standardColor = this.getStandardColor(standard);
        const complianceScore = this.calculateComplianceScore(report);
        
        return `
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>${standardName} Compliance Report</title>
            <style>
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    line-height: 1.6;
                    color: var(--vscode-foreground);
                    background-color: var(--vscode-editor-background);
                    margin: 0;
                    padding: 20px;
                }
                .header {
                    background: linear-gradient(135deg, ${standardColor}, #2d3748);
                    color: white;
                    padding: 30px;
                    border-radius: 12px;
                    margin-bottom: 30px;
                    text-align: center;
                    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
                }
                .header h1 {
                    margin: 0;
                    font-size: 2.5em;
                    font-weight: 300;
                }
                .header .subtitle {
                    font-size: 1.2em;
                    opacity: 0.9;
                    margin-top: 10px;
                }
                .compliance-score {
                    display: inline-block;
                    background: rgba(255,255,255,0.2);
                    padding: 10px 20px;
                    border-radius: 25px;
                    margin-top: 15px;
                    font-size: 1.1em;
                    font-weight: bold;
                }
                .summary-cards {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                    gap: 20px;
                    margin-bottom: 30px;
                }
                .summary-card {
                    background: var(--vscode-editor-background);
                    border: 1px solid var(--vscode-widget-border);
                    border-radius: 8px;
                    padding: 20px;
                    text-align: center;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
                }
                .summary-card h3 {
                    margin: 0 0 10px 0;
                    color: var(--vscode-textLink-foreground);
                }
                .summary-card .number {
                    font-size: 2em;
                    font-weight: bold;
                    margin: 10px 0;
                }
                .summary-card.errors .number { color: #e53e3e; }
                .summary-card.warnings .number { color: #f6ad55; }
                .summary-card.info .number { color: #4299e1; }
                .summary-card.covered .number { color: #48bb78; }
                .standard-info {
                    background: var(--vscode-textBlockQuote-background);
                    border-left: 4px solid ${standardColor};
                    padding: 20px;
                    margin: 20px 0;
                    border-radius: 0 8px 8px 0;
                }
                .actions {
                    display: flex;
                    gap: 15px;
                    margin: 30px 0;
                    flex-wrap: wrap;
                }
                .btn {
                    background: var(--vscode-button-background);
                    color: var(--vscode-button-foreground);
                    border: none;
                    padding: 12px 24px;
                    border-radius: 6px;
                    cursor: pointer;
                    font-size: 14px;
                    transition: all 0.2s;
                    text-decoration: none;
                    display: inline-block;
                }
                .btn:hover {
                    background: var(--vscode-button-hoverBackground);
                    transform: translateY(-1px);
                }
                .btn.secondary {
                    background: var(--vscode-button-secondaryBackground);
                    color: var(--vscode-button-secondaryForeground);
                }
                .findings {
                    margin-top: 30px;
                }
                .finding {
                    background: var(--vscode-editor-background);
                    border: 1px solid var(--vscode-widget-border);
                    border-radius: 8px;
                    margin: 15px 0;
                    padding: 20px;
                }
                .finding.error { border-left: 4px solid #e53e3e; }
                .finding.warning { border-left: 4px solid #f6ad55; }
                .finding.info { border-left: 4px solid #4299e1; }
                .finding h4 {
                    margin: 0 0 10px 0;
                    color: var(--vscode-textLink-foreground);
                }
                .finding .meta {
                    font-size: 0.9em;
                    color: var(--vscode-descriptionForeground);
                    margin: 5px 0;
                }
                .finding .remediation {
                    background: var(--vscode-textBlockQuote-background);
                    padding: 15px;
                    border-radius: 6px;
                    margin-top: 15px;
                    border-left: 3px solid ${standardColor};
                }
                .loading {
                    display: none;
                    text-align: center;
                    padding: 20px;
                }
                .spinner {
                    border: 3px solid var(--vscode-widget-border);
                    border-top: 3px solid var(--vscode-textLink-foreground);
                    border-radius: 50%;
                    width: 30px;
                    height: 30px;
                    animation: spin 1s linear infinite;
                    margin: 0 auto 15px auto;
                }
                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>🛡️ ${standardName} Compliance Report</h1>
                <div class="subtitle">${this.getStandardDescription(standard)}</div>
                <div class="compliance-score">
                    Compliance Score: ${complianceScore}%
                </div>
            </div>

            <div class="summary-cards">
                <div class="summary-card errors">
                    <h3>Critical Issues</h3>
                    <div class="number">${report.summary.errors}</div>
                </div>
                <div class="summary-card warnings">
                    <h3>Warnings</h3>
                    <div class="number">${report.summary.warnings}</div>
                </div>
                <div class="summary-card info">
                    <h3>Information</h3>
                    <div class="number">${report.summary.info}</div>
                </div>
                <div class="summary-card covered">
                    <h3>Controls Covered</h3>
                    <div class="number">${report.summary.controlsCovered}</div>
                </div>
            </div>

            <div class="standard-info">
                <h3>About ${standardName}</h3>
                <p>${this.getStandardDescription(standard)}</p>
            </div>

            <div class="actions">
                <button class="btn" onclick="generateAIReport()">🤖 Generate AI Analysis</button>
                <button class="btn secondary" onclick="exportReport('pdf')">📄 Export PDF</button>
                <button class="btn secondary" onclick="exportReport('html')">🌐 Export HTML</button>
                <button class="btn secondary" onclick="exportReport('json')">📋 Export JSON</button>
            </div>

            <div class="loading" id="loading">
                <div class="spinner"></div>
                <div>Generating AI-enhanced analysis...</div>
            </div>

            <div class="findings">
                <h2>📋 Detailed Findings</h2>
                ${report.issues.map(issue => `
                    <div class="finding ${issue.severity}">
                        <h4>${issue.control}: ${issue.message}</h4>
                        <div class="meta">
                            <strong>File:</strong> ${issue.file}:${issue.line}<br>
                            <strong>Severity:</strong> ${issue.severity.toUpperCase()}
                        </div>
                        <div class="remediation">
                            <strong>💡 Remediation:</strong> ${issue.remediation}
                        </div>
                    </div>
                `).join('')}
            </div>

            <script>
                const vscode = acquireVsCodeApi();

                function generateAIReport() {
                    document.getElementById('loading').style.display = 'block';
                    vscode.postMessage({ command: 'generateAIReport' });
                }

                function exportReport(format) {
                    vscode.postMessage({ command: 'exportReport', format: format });
                }

                function showLoading() {
                    document.getElementById('loading').style.display = 'block';
                }

                function hideLoading() {
                    document.getElementById('loading').style.display = 'none';
                }

                window.addEventListener('message', event => {
                    const message = event.data;
                    switch (message.command) {
                        case 'showLoading':
                            showLoading();
                            break;
                        case 'hideLoading':
                            hideLoading();
                            break;
                    }
                });
            </script>
        </body>
        </html>
        `;
    }

    private getStandardDisplayName(standard: string): string {
        const names: { [key: string]: string } = {
            'FedRAMP': 'FedRAMP',
            'GDPR': 'GDPR',
            'HIPAA': 'HIPAA',
            'DPDP': 'DPDP Act',
            'PCI-DSS': 'PCI DSS',
            'ISO-27001': 'ISO 27001',
            'ISO-27002': 'ISO 27002',
            'SOC-2': 'SOC 2',
            'NIST-CSF': 'NIST Cybersecurity Framework'
        };
        return names[standard] || standard;
    }

    private getStandardColor(standard: string): string {
        const colors: { [key: string]: string } = {
            'FedRAMP': '#1e40af',
            'GDPR': '#7c3aed',
            'HIPAA': '#059669',
            'DPDP': '#ea580c',
            'PCI-DSS': '#dc2626',
            'ISO-27001': '#0891b2',
            'ISO-27002': '#0284c7',
            'SOC-2': '#9333ea',
            'NIST-CSF': '#065f46'
        };
        return colors[standard] || '#6366f1';
    }

    private getStandardDescription(standard: string): string {
        const descriptions: { [key: string]: string } = {
            'FedRAMP': 'Federal Risk and Authorization Management Program - US government cloud security standard',
            'GDPR': 'General Data Protection Regulation - EU data protection and privacy regulation',
            'HIPAA': 'Health Insurance Portability and Accountability Act - US healthcare privacy regulation',
            'DPDP': 'Digital Personal Data Protection Act - India\'s comprehensive data protection law',
            'PCI-DSS': 'Payment Card Industry Data Security Standard - Global payment card security requirements',
            'ISO-27001': 'International standard for information security management systems',
            'ISO-27002': 'Code of practice for information security controls',
            'SOC-2': 'Service Organization Control 2 - Security and availability controls for service organizations',
            'NIST-CSF': 'NIST Cybersecurity Framework - US framework for managing cybersecurity risk'
        };
        return descriptions[standard] || 'Compliance standard for security and privacy controls';
    }

    private async exportStandardReport(report: ComplianceReport, standard: string, format: string): Promise<void> {
        const standardName = this.getStandardDisplayName(standard);
        
        try {
            let content: string;
            let extension: string;

            switch (format) {
                case 'json':
                    content = JSON.stringify(report, null, 2);
                    extension = 'json';
                    break;
                case 'html':
                    content = this.getStandardSpecificWebviewContent(report, standard);
                    extension = 'html';
                    break;
                case 'pdf':
                    vscode.window.showWarningMessage('PDF export is not yet implemented. Using HTML format.');
                    content = this.getStandardSpecificWebviewContent(report, standard);
                    extension = 'html';
                    break;
                default:
                    content = this.generateStandardMarkdownReport(report, standard);
                    extension = 'md';
            }

            const uri = await vscode.window.showSaveDialog({
                defaultUri: vscode.Uri.file(`${standardName}_compliance_report_${new Date().toISOString().split('T')[0]}.${extension}`),
                filters: {
                    'Report Files': [extension]
                }
            });

            if (uri) {
                const fs = require('fs');
                fs.writeFileSync(uri.fsPath, content);
                vscode.window.showInformationMessage(`${standardName} report exported to ${uri.fsPath}`);
            }
        } catch (error) {
            vscode.window.showErrorMessage(`Failed to export ${standardName} report: ${error}`);
        }
    }

    private generateStandardMarkdownReport(report: ComplianceReport, standard: string): string {
        const standardName = this.getStandardDisplayName(standard);
        const complianceScore = this.calculateComplianceScore(report);
        
        return `# ${standardName} Compliance Report

Generated: ${report.timestamp.toLocaleString()}
Compliance Score: ${complianceScore}%

## Summary

- **Standard**: ${standardName}
- **Total Files Scanned**: ${report.totalFiles}
- **Files with Issues**: ${report.scannedFiles}
- **Critical Issues**: ${report.summary.errors}
- **Warnings**: ${report.summary.warnings}
- **Information Items**: ${report.summary.info}
- **Controls Covered**: ${report.summary.controlsCovered}/${report.summary.totalControls}

## About ${standardName}

${this.getStandardDescription(standard)}

## Detailed Findings

${report.issues.map(issue => `
### ${issue.control}: ${issue.message}

- **File**: \`${issue.file}:${issue.line}\`
- **Severity**: ${issue.severity.toUpperCase()}
- **Remediation**: ${issue.remediation}

`).join('')}

## Recommendations

${this.getStandardRecommendations(standard, report)}

---
*Report generated by FedRAMP Compliance Scanner v1.1.0*
`;
    }

    private getStandardRecommendations(standard: string, report: ComplianceReport): string {
        const recommendations: { [key: string]: string } = {
            'GDPR': `
- Implement privacy by design principles
- Ensure explicit consent mechanisms
- Establish data subject rights procedures
- Conduct regular privacy impact assessments
- Implement data breach notification procedures`,
            'HIPAA': `
- Implement administrative safeguards
- Establish physical safeguards for PHI
- Deploy technical safeguards for electronic PHI
- Conduct regular risk assessments
- Implement audit controls and procedures`,
            'PCI-DSS': `
- Install and maintain firewall configuration
- Protect stored cardholder data with encryption
- Use strong cryptography and security protocols
- Implement strong access control measures
- Regularly monitor and test networks`,
            'ISO-27001': `
- Establish information security management system (ISMS)
- Implement risk management processes
- Define security policies and procedures
- Conduct regular security assessments
- Ensure continuous improvement`,
            'SOC-2': `
- Implement logical and physical access controls
- Ensure system operations monitoring
- Establish change management procedures
- Implement data backup and recovery
- Monitor system performance and availability`
        };
        
        return recommendations[standard] || `
- Review and address all identified issues
- Implement security best practices
- Conduct regular compliance assessments
- Establish monitoring and alerting procedures
- Maintain documentation and audit trails`;
    }

    getLastReport(): ComplianceReport | null {
        return this.lastReport;
    }

    // Public method to store a report without generating a webview
    storeReport(report: ComplianceReport): void {
        this.setLastReport(report);
        this.saveReportToHistory(report);
    }

    private setLastReport(report: ComplianceReport): void {
        this.lastReport = report;
    }
}
